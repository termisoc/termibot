#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys, re, os
from datetime import datetime

import pymongo as mongo

m = mongo.connection.Connection()
db = m.subvirc.karma

def apply_karma(item, sign, reason, instance):
    direction = 1 if sign == '++' else -1 if sign == '--' else 0
    obj = {
            'item': item,
            'direction': direction,
            'reason': reason,
            'instance': instance,
            'timestamp': float(datetime.now().strftime("%s.%f")),
        }
    db.insert(obj)

    obj['total'] = _total(item, instance)
    return obj

def _karma_item_cleanup(item):
    if item[0] == '"':
        item = item[1:-1]
    else:
        item = re.sub('_',' ',item)
    return item

def _karma_find_words(line):
    simple_karma = r'\w{3,}'
    quoted_string = r'"(?:(?:\\.)|(?:[^"]))*"'
    karma_item = '(' + simple_karma + '|' + quoted_string + ')' + r'(?=(?:\s|$))'
    try:
        karma_item_re = re.compile(karma_item)
    except:
        return []

    items = [_karma_item_cleanup(i) for i in karma_item_re.findall(line.strip())]
    return items

def _karma_find_items(line):
    plusminus = r'([+-]{2}|Â±)'
    simple_karma = r'\w{3,}'
    quoted_string = r'"(?:(?:\\.)|(?:[^"]))*"'
    karma_item = '(' + simple_karma + '|' + quoted_string + ')' + plusminus + r'(?=(?:\s|$))'
    karma_item_reason = karma_item + '( (?:for|because)' + '.+?' + '(?='+karma_item+'|$)|\([^\)]+\))?'

    try:
        karma_item_re = re.compile(karma_item_reason)
    except:
        return []

    items = [list(i) for i in karma_item_re.findall(line.strip())]
    for item in items:
        item[0] = _karma_item_cleanup(item[0])

    return items

def _filter(line, instance):
    items = _karma_find_items(line.strip())
    result = []
    for item in items:
        karma, sign, reason = item[0:3]
        reason = reason.strip()
        result.append(apply_karma(karma, sign, reason, instance))
        result[-1]['direction']= 'up' if sign == '++' else 'down' if sign == '--' else 'no change'
    return result

def _total(item, instance):
    try:
        item = re.compile(item,re.I)
    except:
        return 0
    count = db.group(None, {'item':item, 'instance':instance}, { 'sum': 0 }, 'function(obj,prev) { prev.sum += obj.direction; }', None)
    if len(count) > 0:
        return int(count[0]['sum'])
    return 0

def _multi_total(items, instance):
    try:
        items = re.compile(items, re.I)
    except:
        return []
    count = db.group({'item': True}, {'item':items, 'instance':instance}, { 'sum': 0 }, 'function(obj,prev) { prev.sum += obj.direction; }', None)
    if len(count) > 0:
        return count
    return []

if __name__ == '__main__':
    nick, user, host, sender = sys.stdin.readline().split()[0:4]
    method = os.path.basename(sys.argv[0])
    instance = sys.argv[1]
    args = sys.stdin.readline()

    if len(args.strip()) == 0:
        sys.exit()

    if method == 'karma_filter':
        result = _filter(args, instance)
        if result != "":
            print(', '.join(['%(item)s %(direction)s (now %(total)s)' % item for item in result]))
    elif method == 'karma':
        result = "; ".join(["%s: %s" % (i.encode('utf-8'),_total(i, instance)) for i in _karma_find_words(args)])
        if result != "":
            print('karma totals: ' + result.encode('utf-8'))
    elif method == 'karmasearch' or method == 'ks':
        args = args.strip()
        if len(args) > 0:
            result = ", ".join(["%s: %s" % (i['item'], int(i['sum'])) for i in _multi_total(args, instance)])
            if result != "":
                print('karma totals: ' + result.encode('utf-8'))
